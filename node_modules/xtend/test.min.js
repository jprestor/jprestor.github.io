var test=require("tape"),extend=require("./"),mutableExtend=require("./mutable");test("merge",function(e){var t={a:"foo"},r={b:"bar"};e.deepEqual(extend(t,r),{a:"foo",b:"bar"}),e.end()}),test("replace",function(e){var t={a:"foo"},r={a:"bar"};e.deepEqual(extend(t,r),{a:"bar"}),e.end()}),test("undefined",function(e){var t={a:void 0},r={b:"foo"};e.deepEqual(extend(t,r),{a:void 0,b:"foo"}),e.deepEqual(extend(r,t),{a:void 0,b:"foo"}),e.end()}),test("handle 0",function(e){var t={a:"default"},r={a:0};e.deepEqual(extend(t,r),{a:0}),e.deepEqual(extend(r,t),{a:"default"}),e.end()}),test("is immutable",function(e){var t={};extend(t,{foo:"bar"}),e.equal(t.foo,void 0),e.end()}),test("null as argument",function(e){var t={foo:"bar"},r=null,n=void 0;e.deepEqual(extend(r,t,n),{foo:"bar"}),e.end()}),test("mutable",function(e){var t={foo:"bar"};mutableExtend(t,{bar:"baz"}),e.equal(t.bar,"baz"),e.end()}),test("null prototype",function(e){var t={a:"foo"},r=Object.create(null);r.b="bar",e.deepEqual(extend(t,r),{a:"foo",b:"bar"}),e.end()}),test("null prototype mutable",function(e){var t={foo:"bar"},r=Object.create(null);r.bar="baz",mutableExtend(t,r),e.equal(t.bar,"baz"),e.end()});