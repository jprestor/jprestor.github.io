"use strict";var test=require("tape"),qs=require("../"),iconv=require("iconv-lite");test("parse()",function(e){e.test("parses a simple string",function(e){e.deepEqual(qs.parse("0=foo"),{0:"foo"}),e.deepEqual(qs.parse("foo=c++"),{foo:"c  "}),e.deepEqual(qs.parse("a[>=]=23"),{a:{">=":"23"}}),e.deepEqual(qs.parse("a[<=>]==23"),{a:{"<=>":"=23"}}),e.deepEqual(qs.parse("a[==]=23"),{a:{"==":"23"}}),e.deepEqual(qs.parse("foo",{strictNullHandling:!0}),{foo:null}),e.deepEqual(qs.parse("foo"),{foo:""}),e.deepEqual(qs.parse("foo="),{foo:""}),e.deepEqual(qs.parse("foo=bar"),{foo:"bar"}),e.deepEqual(qs.parse(" foo = bar = baz "),{" foo ":" bar = baz "}),e.deepEqual(qs.parse("foo=bar=baz"),{foo:"bar=baz"}),e.deepEqual(qs.parse("foo=bar&bar=baz"),{foo:"bar",bar:"baz"}),e.deepEqual(qs.parse("foo2=bar2&baz2="),{foo2:"bar2",baz2:""}),e.deepEqual(qs.parse("foo=bar&baz",{strictNullHandling:!0}),{foo:"bar",baz:null}),e.deepEqual(qs.parse("foo=bar&baz"),{foo:"bar",baz:""}),e.deepEqual(qs.parse("cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World"),{cht:"p3",chd:"t:60,40",chs:"250x100",chl:"Hello|World"}),e.end()}),e.test("allows enabling dot notation",function(e){e.deepEqual(qs.parse("a.b=c"),{"a.b":"c"}),e.deepEqual(qs.parse("a.b=c",{allowDots:!0}),{a:{b:"c"}}),e.end()}),e.deepEqual(qs.parse("a[b]=c"),{a:{b:"c"}},"parses a single nested string"),e.deepEqual(qs.parse("a[b][c]=d"),{a:{b:{c:"d"}}},"parses a double nested string"),e.deepEqual(qs.parse("a[b][c][d][e][f][g][h]=i"),{a:{b:{c:{d:{e:{f:{"[g][h]":"i"}}}}}}},"defaults to a depth of 5"),e.test("only parses one level when depth = 1",function(e){e.deepEqual(qs.parse("a[b][c]=d",{depth:1}),{a:{b:{"[c]":"d"}}}),e.deepEqual(qs.parse("a[b][c][d]=e",{depth:1}),{a:{b:{"[c][d]":"e"}}}),e.end()}),e.deepEqual(qs.parse("a=b&a=c"),{a:["b","c"]},"parses a simple array"),e.test("parses an explicit array",function(e){e.deepEqual(qs.parse("a[]=b"),{a:["b"]}),e.deepEqual(qs.parse("a[]=b&a[]=c"),{a:["b","c"]}),e.deepEqual(qs.parse("a[]=b&a[]=c&a[]=d"),{a:["b","c","d"]}),e.end()}),e.test("parses a mix of simple and explicit arrays",function(e){e.deepEqual(qs.parse("a=b&a[]=c"),{a:["b","c"]}),e.deepEqual(qs.parse("a[]=b&a=c"),{a:["b","c"]}),e.deepEqual(qs.parse("a[0]=b&a=c"),{a:["b","c"]}),e.deepEqual(qs.parse("a=b&a[0]=c"),{a:["b","c"]}),e.deepEqual(qs.parse("a[1]=b&a=c",{arrayLimit:20}),{a:["b","c"]}),e.deepEqual(qs.parse("a[]=b&a=c",{arrayLimit:0}),{a:["b","c"]}),e.deepEqual(qs.parse("a[]=b&a=c"),{a:["b","c"]}),e.deepEqual(qs.parse("a=b&a[1]=c",{arrayLimit:20}),{a:["b","c"]}),e.deepEqual(qs.parse("a=b&a[]=c",{arrayLimit:0}),{a:["b","c"]}),e.deepEqual(qs.parse("a=b&a[]=c"),{a:["b","c"]}),e.end()}),e.test("parses a nested array",function(e){e.deepEqual(qs.parse("a[b][]=c&a[b][]=d"),{a:{b:["c","d"]}}),e.deepEqual(qs.parse("a[>=]=25"),{a:{">=":"25"}}),e.end()}),e.test("allows to specify array indices",function(e){e.deepEqual(qs.parse("a[1]=c&a[0]=b&a[2]=d"),{a:["b","c","d"]}),e.deepEqual(qs.parse("a[1]=c&a[0]=b"),{a:["b","c"]}),e.deepEqual(qs.parse("a[1]=c",{arrayLimit:20}),{a:["c"]}),e.deepEqual(qs.parse("a[1]=c",{arrayLimit:0}),{a:{1:"c"}}),e.deepEqual(qs.parse("a[1]=c"),{a:["c"]}),e.end()}),e.test("limits specific array indices to arrayLimit",function(e){e.deepEqual(qs.parse("a[20]=a",{arrayLimit:20}),{a:["a"]}),e.deepEqual(qs.parse("a[21]=a",{arrayLimit:20}),{a:{21:"a"}}),e.end()}),e.deepEqual(qs.parse("a[12b]=c"),{a:{"12b":"c"}},"supports keys that begin with a number"),e.test("supports encoded = signs",function(e){e.deepEqual(qs.parse("he%3Dllo=th%3Dere"),{"he=llo":"th=ere"}),e.end()}),e.test("is ok with url encoded strings",function(e){e.deepEqual(qs.parse("a[b%20c]=d"),{a:{"b c":"d"}}),e.deepEqual(qs.parse("a[b]=c%20d"),{a:{b:"c d"}}),e.end()}),e.test("allows brackets in the value",function(e){e.deepEqual(qs.parse('pets=["tobi"]'),{pets:'["tobi"]'}),e.deepEqual(qs.parse('operators=[">=", "<="]'),{operators:'[">=", "<="]'}),e.end()}),e.test("allows empty values",function(e){e.deepEqual(qs.parse(""),{}),e.deepEqual(qs.parse(null),{}),e.deepEqual(qs.parse(void 0),{}),e.end()}),e.test("transforms arrays to objects",function(e){e.deepEqual(qs.parse("foo[0]=bar&foo[bad]=baz"),{foo:{0:"bar",bad:"baz"}}),e.deepEqual(qs.parse("foo[bad]=baz&foo[0]=bar"),{foo:{bad:"baz",0:"bar"}}),e.deepEqual(qs.parse("foo[bad]=baz&foo[]=bar"),{foo:{bad:"baz",0:"bar"}}),e.deepEqual(qs.parse("foo[]=bar&foo[bad]=baz"),{foo:{0:"bar",bad:"baz"}}),e.deepEqual(qs.parse("foo[bad]=baz&foo[]=bar&foo[]=foo"),{foo:{bad:"baz",0:"bar",1:"foo"}}),e.deepEqual(qs.parse("foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb"),{foo:[{a:"a",b:"b"},{a:"aa",b:"bb"}]}),e.deepEqual(qs.parse("a[]=b&a[t]=u&a[hasOwnProperty]=c",{allowPrototypes:!1}),{a:{0:"b",t:"u"}}),e.deepEqual(qs.parse("a[]=b&a[t]=u&a[hasOwnProperty]=c",{allowPrototypes:!0}),{a:{0:"b",t:"u",hasOwnProperty:"c"}}),e.deepEqual(qs.parse("a[]=b&a[hasOwnProperty]=c&a[x]=y",{allowPrototypes:!1}),{a:{0:"b",x:"y"}}),e.deepEqual(qs.parse("a[]=b&a[hasOwnProperty]=c&a[x]=y",{allowPrototypes:!0}),{a:{0:"b",hasOwnProperty:"c",x:"y"}}),e.end()}),e.test("transforms arrays to objects (dot notation)",function(e){e.deepEqual(qs.parse("foo[0].baz=bar&fool.bad=baz",{allowDots:!0}),{foo:[{baz:"bar"}],fool:{bad:"baz"}}),e.deepEqual(qs.parse("foo[0].baz=bar&fool.bad.boo=baz",{allowDots:!0}),{foo:[{baz:"bar"}],fool:{bad:{boo:"baz"}}}),e.deepEqual(qs.parse("foo[0][0].baz=bar&fool.bad=baz",{allowDots:!0}),{foo:[[{baz:"bar"}]],fool:{bad:"baz"}}),e.deepEqual(qs.parse("foo[0].baz[0]=15&foo[0].bar=2",{allowDots:!0}),{foo:[{baz:["15"],bar:"2"}]}),e.deepEqual(qs.parse("foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2",{allowDots:!0}),{foo:[{baz:["15","16"],bar:"2"}]}),e.deepEqual(qs.parse("foo.bad=baz&foo[0]=bar",{allowDots:!0}),{foo:{bad:"baz",0:"bar"}}),e.deepEqual(qs.parse("foo.bad=baz&foo[]=bar",{allowDots:!0}),{foo:{bad:"baz",0:"bar"}}),e.deepEqual(qs.parse("foo[]=bar&foo.bad=baz",{allowDots:!0}),{foo:{0:"bar",bad:"baz"}}),e.deepEqual(qs.parse("foo.bad=baz&foo[]=bar&foo[]=foo",{allowDots:!0}),{foo:{bad:"baz",0:"bar",1:"foo"}}),e.deepEqual(qs.parse("foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb",{allowDots:!0}),{foo:[{a:"a",b:"b"},{a:"aa",b:"bb"}]}),e.end()}),e.test("correctly prunes undefined values when converting an array to an object",function(e){e.deepEqual(qs.parse("a[2]=b&a[99999999]=c"),{a:{2:"b",99999999:"c"}}),e.end()}),e.test("supports malformed uri characters",function(e){e.deepEqual(qs.parse("{%:%}",{strictNullHandling:!0}),{"{%:%}":null}),e.deepEqual(qs.parse("{%:%}="),{"{%:%}":""}),e.deepEqual(qs.parse("foo=%:%}"),{foo:"%:%}"}),e.end()}),e.test("doesn't produce empty keys",function(e){e.deepEqual(qs.parse("_r=1&"),{_r:"1"}),e.end()}),e.test("cannot access Object prototype",function(e){qs.parse("constructor[prototype][bad]=bad"),qs.parse("bad[constructor][prototype][bad]=bad"),e.equal(typeof Object.prototype.bad,"undefined"),e.end()}),e.test("parses arrays of objects",function(e){e.deepEqual(qs.parse("a[][b]=c"),{a:[{b:"c"}]}),e.deepEqual(qs.parse("a[0][b]=c"),{a:[{b:"c"}]}),e.end()}),e.test("allows for empty strings in arrays",function(e){e.deepEqual(qs.parse("a[]=b&a[]=&a[]=c"),{a:["b","","c"]}),e.deepEqual(qs.parse("a[0]=b&a[1]&a[2]=c&a[19]=",{strictNullHandling:!0,arrayLimit:20}),{a:["b",null,"c",""]},"with arrayLimit 20 + array indices: null then empty string works"),e.deepEqual(qs.parse("a[]=b&a[]&a[]=c&a[]=",{strictNullHandling:!0,arrayLimit:0}),{a:["b",null,"c",""]},"with arrayLimit 0 + array brackets: null then empty string works"),e.deepEqual(qs.parse("a[0]=b&a[1]=&a[2]=c&a[19]",{strictNullHandling:!0,arrayLimit:20}),{a:["b","","c",null]},"with arrayLimit 20 + array indices: empty string then null works"),e.deepEqual(qs.parse("a[]=b&a[]=&a[]=c&a[]",{strictNullHandling:!0,arrayLimit:0}),{a:["b","","c",null]},"with arrayLimit 0 + array brackets: empty string then null works"),e.deepEqual(qs.parse("a[]=&a[]=b&a[]=c"),{a:["","b","c"]},"array brackets: empty strings work"),e.end()}),e.test("compacts sparse arrays",function(e){e.deepEqual(qs.parse("a[10]=1&a[2]=2",{arrayLimit:20}),{a:["2","1"]}),e.deepEqual(qs.parse("a[1][b][2][c]=1",{arrayLimit:20}),{a:[{b:[{c:"1"}]}]}),e.deepEqual(qs.parse("a[1][2][3][c]=1",{arrayLimit:20}),{a:[[[{c:"1"}]]]}),e.deepEqual(qs.parse("a[1][2][3][c][1]=1",{arrayLimit:20}),{a:[[[{c:["1"]}]]]}),e.end()}),e.test("parses semi-parsed strings",function(e){e.deepEqual(qs.parse({"a[b]":"c"}),{a:{b:"c"}}),e.deepEqual(qs.parse({"a[b]":"c","a[d]":"e"}),{a:{b:"c",d:"e"}}),e.end()}),e.test("parses buffers correctly",function(e){var t=new Buffer("test");e.deepEqual(qs.parse({a:t}),{a:t}),e.end()}),e.test("continues parsing when no parent is found",function(e){e.deepEqual(qs.parse("[]=&a=b"),{0:"",a:"b"}),e.deepEqual(qs.parse("[]&a=b",{strictNullHandling:!0}),{0:null,a:"b"}),e.deepEqual(qs.parse("[foo]=bar"),{foo:"bar"}),e.end()}),e.test("does not error when parsing a very long array",function(e){for(var t="a[]=a";Buffer.byteLength(t)<131072;)t=t+"&"+t;e.doesNotThrow(function(){qs.parse(t)}),e.end()}),e.test("should not throw when a native prototype has an enumerable property",{parallel:!1},function(e){Object.prototype.crash="",Array.prototype.crash="",e.doesNotThrow(qs.parse.bind(null,"a=b")),e.deepEqual(qs.parse("a=b"),{a:"b"}),e.doesNotThrow(qs.parse.bind(null,"a[][b]=c")),e.deepEqual(qs.parse("a[][b]=c"),{a:[{b:"c"}]}),delete Object.prototype.crash,delete Array.prototype.crash,e.end()}),e.test("parses a string with an alternative string delimiter",function(e){e.deepEqual(qs.parse("a=b;c=d",{delimiter:";"}),{a:"b",c:"d"}),e.end()}),e.test("parses a string with an alternative RegExp delimiter",function(e){e.deepEqual(qs.parse("a=b; c=d",{delimiter:/[;,] */}),{a:"b",c:"d"}),e.end()}),e.test("does not use non-splittable objects as delimiters",function(e){e.deepEqual(qs.parse("a=b&c=d",{delimiter:!0}),{a:"b",c:"d"}),e.end()}),e.test("allows overriding parameter limit",function(e){e.deepEqual(qs.parse("a=b&c=d",{parameterLimit:1}),{a:"b"}),e.end()}),e.test("allows setting the parameter limit to Infinity",function(e){e.deepEqual(qs.parse("a=b&c=d",{parameterLimit:1/0}),{a:"b",c:"d"}),e.end()}),e.test("allows overriding array limit",function(e){e.deepEqual(qs.parse("a[0]=b",{arrayLimit:-1}),{a:{0:"b"}}),e.deepEqual(qs.parse("a[-1]=b",{arrayLimit:-1}),{a:{"-1":"b"}}),e.deepEqual(qs.parse("a[0]=b&a[1]=c",{arrayLimit:0}),{a:{0:"b",1:"c"}}),e.end()}),e.test("allows disabling array parsing",function(e){e.deepEqual(qs.parse("a[0]=b&a[1]=c",{parseArrays:!1}),{a:{0:"b",1:"c"}}),e.end()}),e.test("parses an object",function(e){var t={"user[name]":{"pop[bob]":3},"user[email]":null},r={user:{name:{"pop[bob]":3},email:null}},n=qs.parse(t);e.deepEqual(n,r),e.end()}),e.test("parses an object in dot notation",function(e){var t={"user.name":{"pop[bob]":3},"user.email.":null},r={user:{name:{"pop[bob]":3},email:null}},n=qs.parse(t,{allowDots:!0});e.deepEqual(n,r),e.end()}),e.test("parses an object and not child values",function(e){var t={"user[name]":{"pop[bob]":{test:3}},"user[email]":null},r={user:{name:{"pop[bob]":{test:3}},email:null}},n=qs.parse(t);e.deepEqual(n,r),e.end()}),e.test("does not blow up when Buffer global is missing",function(e){var t=global.Buffer;delete global.Buffer;var r=qs.parse("a=b&c=d");global.Buffer=t,e.deepEqual(r,{a:"b",c:"d"}),e.end()}),e.test("does not crash when parsing circular references",function(e){var t={};t.b=t;var r;e.doesNotThrow(function(){r=qs.parse({"foo[bar]":"baz","foo[baz]":t})}),e.equal("foo"in r,!0,'parsed has "foo" property'),e.equal("bar"in r.foo,!0),e.equal("baz"in r.foo,!0),e.equal(r.foo.bar,"baz"),e.deepEqual(r.foo.baz,t),e.end()}),e.test("parses null objects correctly",{skip:!Object.create},function(e){var t=Object.create(null);t.b="c",e.deepEqual(qs.parse(t),{b:"c"});var r=qs.parse({a:t});e.equal("a"in r,!0,'result has "a" property'),e.deepEqual(r.a,t),e.end()}),e.test("parses dates correctly",function(e){var t=new Date;e.deepEqual(qs.parse({a:t}),{a:t}),e.end()}),e.test("parses regular expressions correctly",function(e){var t=/^test$/;e.deepEqual(qs.parse({a:t}),{a:t}),e.end()}),e.test("does not allow overwriting prototype properties",function(e){e.deepEqual(qs.parse("a[hasOwnProperty]=b",{allowPrototypes:!1}),{}),e.deepEqual(qs.parse("hasOwnProperty=b",{allowPrototypes:!1}),{}),e.deepEqual(qs.parse("toString",{allowPrototypes:!1}),{},'bare "toString" results in {}'),e.end()}),e.test("can allow overwriting prototype properties",function(e){e.deepEqual(qs.parse("a[hasOwnProperty]=b",{allowPrototypes:!0}),{a:{hasOwnProperty:"b"}}),e.deepEqual(qs.parse("hasOwnProperty=b",{allowPrototypes:!0}),{hasOwnProperty:"b"}),e.deepEqual(qs.parse("toString",{allowPrototypes:!0}),{toString:""},'bare "toString" results in { toString: "" }'),e.end()}),e.test("params starting with a closing bracket",function(e){e.deepEqual(qs.parse("]=toString"),{"]":"toString"}),e.deepEqual(qs.parse("]]=toString"),{"]]":"toString"}),e.deepEqual(qs.parse("]hello]=toString"),{"]hello]":"toString"}),e.end()}),e.test("params starting with a starting bracket",function(e){e.deepEqual(qs.parse("[=toString"),{"[":"toString"}),e.deepEqual(qs.parse("[[=toString"),{"[[":"toString"}),e.deepEqual(qs.parse("[hello[=toString"),{"[hello[":"toString"}),e.end()}),e.test("add keys to objects",function(e){e.deepEqual(qs.parse("a[b]=c&a=d"),{a:{b:"c",d:!0}},"can add keys to objects"),e.deepEqual(qs.parse("a[b]=c&a=toString"),{a:{b:"c"}},"can not overwrite prototype"),e.deepEqual(qs.parse("a[b]=c&a=toString",{allowPrototypes:!0}),{a:{b:"c",toString:!0}},"can overwrite prototype with allowPrototypes true"),e.deepEqual(qs.parse("a[b]=c&a=toString",{plainObjects:!0}),{a:{b:"c",toString:!0}},"can overwrite prototype with plainObjects true"),e.end()}),e.test("can return null objects",{skip:!Object.create},function(e){var t=Object.create(null);t.a=Object.create(null),t.a.b="c",t.a.hasOwnProperty="d",e.deepEqual(qs.parse("a[b]=c&a[hasOwnProperty]=d",{plainObjects:!0}),t),e.deepEqual(qs.parse(null,{plainObjects:!0}),Object.create(null));var r=Object.create(null);r.a=Object.create(null),r.a[0]="b",r.a.c="d",e.deepEqual(qs.parse("a[]=b&a[c]=d",{plainObjects:!0}),r),e.end()}),e.test("can parse with custom encoding",function(e){e.deepEqual(qs.parse("%8c%a7=%91%e5%8d%e3%95%7b",{decoder:function(e){for(var t=/%([0-9A-F]{2})/gi,r=[],n=t.exec(e);n;)r.push(parseInt(n[1],16)),n=t.exec(e);return iconv.decode(new Buffer(r),"shift_jis").toString()}}),{"県":"大阪府"}),e.end()}),e.test("throws error with wrong decoder",function(e){e["throws"](function(){qs.parse({},{decoder:"string"})},new TypeError("Decoder has to be a function.")),e.end()})});