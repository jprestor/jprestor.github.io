function isCompatible(e,t,r){if(null===e||"object"!=typeof e)return!1;if(void 0===r&&(r=t.prototype._sshpkApiVersion),e instanceof t&&t.prototype._sshpkApiVersion[0]==r[0])return!0;for(var n=Object.getPrototypeOf(e),i=0;n.constructor.name!==t.name;)if(n=Object.getPrototypeOf(n),!n||++i>MAX_CLASS_DEPTH)return!1;if(n.constructor.name!==t.name)return!1;var a=n._sshpkApiVersion;return void 0===a&&(a=t._oldVersionDetect(e)),a[0]!=r[0]||a[1]<r[1]?!1:!0}function assertCompatible(e,t,r,n){if(void 0===n&&(n="object"),assert.ok(e,n+" must not be null"),assert.object(e,n+" must be an object"),void 0===r&&(r=t.prototype._sshpkApiVersion),!(e instanceof t&&t.prototype._sshpkApiVersion[0]==r[0])){for(var i=Object.getPrototypeOf(e),a=0;i.constructor.name!==t.name;)i=Object.getPrototypeOf(i),assert.ok(i&&++a<=MAX_CLASS_DEPTH,n+" must be a "+t.name+" instance");assert.strictEqual(i.constructor.name,t.name,n+" must be a "+t.name+" instance");var o=i._sshpkApiVersion;void 0===o&&(o=t._oldVersionDetect(e)),assert.ok(o[0]==r[0]&&o[1]>=r[1],n+" must be compatible with "+t.name+" klass version "+r[0]+"."+r[1])}}function opensslKeyDeriv(e,t,r,n){assert.buffer(t,"salt"),assert.buffer(r,"passphrase"),assert.number(n,"iteration count");var i=CIPHER_LEN[e];assert.object(i,"supported cipher"),t=t.slice(0,PKCS5_SALT_LEN);for(var a,o,s,u=new Buffer(0);u.length<i.key+i.iv;){s=[],o&&s.push(o),s.push(r),s.push(t),a=Buffer.concat(s);for(var l=0;n>l;++l)a=crypto.createHash("md5").update(a).digest();u=Buffer.concat([u,a]),o=a}return{key:u.slice(0,i.key),iv:u.slice(i.key,i.key+i.iv)}}function countZeros(e){for(var t=0,r=8;t<e.length;){var n=1<<r;if((e[t]&n)===n)break;r--,0>r&&(t++,r=8)}return 8*t+(8-r)-1}function bufferSplit(e,t){assert.buffer(e),assert.string(t);for(var r=[],n=0,i=0,a=0;a<e.length;++a)if(e[a]===t.charCodeAt(i)?++i:i=e[a]===t.charCodeAt(0)?1:0,i>=t.length){var o=a+1;r.push(e.slice(n,o-i)),n=o,i=0}return n<=e.length&&r.push(e.slice(n,e.length)),r}function ecNormalize(e,t){if(assert.buffer(e),0===e[0]&&4===e[1])return t?e:e.slice(1);if(4===e[0]){if(!t)return e}else{for(;0===e[0];)e=e.slice(1);if(2===e[0]||3===e[0])throw new Error("Compressed elliptic curve points are not supported");if(4!==e[0])throw new Error("Not a valid elliptic curve point");if(!t)return e}var r=new Buffer(e.length+1);return r[0]=0,e.copy(r,1),r}function mpNormalize(e){for(assert.buffer(e);e.length>1&&0===e[0]&&0===(128&e[1]);)e=e.slice(1);if(128===(128&e[0])){var t=new Buffer(e.length+1);t[0]=0,e.copy(t,1),e=t}return e}function bigintToMpBuf(e){var t=new Buffer(e.toByteArray());return t=mpNormalize(t)}function calculateDSAPublic(e,t,r){assert.buffer(e),assert.buffer(t),assert.buffer(r);try{var n=require("jsbn").BigInteger}catch(i){throw new Error("To load a PKCS#8 format DSA private key, the node jsbn library is required.")}e=new n(e),t=new n(t),r=new n(r);var a=e.modPow(r,t),o=bigintToMpBuf(a);return o}function addRSAMissing(e){assert.object(e),assertCompatible(e,PrivateKey,[1,1]);try{var t=require("jsbn").BigInteger}catch(r){throw new Error("To write a PEM private key from this source, the node jsbn lib is required.")}var i,n=new t(e.part.d.data);if(!e.part.dmodp){var a=new t(e.part.p.data),o=n.mod(a.subtract(1));i=bigintToMpBuf(o),e.part.dmodp={name:"dmodp",data:i},e.parts.push(e.part.dmodp)}if(!e.part.dmodq){var s=new t(e.part.q.data),u=n.mod(s.subtract(1));i=bigintToMpBuf(u),e.part.dmodq={name:"dmodq",data:i},e.parts.push(e.part.dmodq)}}function opensshCipherInfo(e){var t={};switch(e){case"3des-cbc":t.keySize=24,t.blockSize=8,t.opensslName="des-ede3-cbc";break;case"blowfish-cbc":t.keySize=16,t.blockSize=8,t.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":t.keySize=16,t.blockSize=16,t.opensslName="aes-128-"+e.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":t.keySize=24,t.blockSize=16,t.opensslName="aes-192-"+e.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":t.keySize=32,t.blockSize=16,t.opensslName="aes-256-"+e.slice(7,10);break;default:throw new Error('Unsupported openssl cipher "'+e+'"')}return t}module.exports={bufferSplit:bufferSplit,addRSAMissing:addRSAMissing,calculateDSAPublic:calculateDSAPublic,mpNormalize:mpNormalize,ecNormalize:ecNormalize,countZeros:countZeros,assertCompatible:assertCompatible,isCompatible:isCompatible,opensslKeyDeriv:opensslKeyDeriv,opensshCipherInfo:opensshCipherInfo};var assert=require("assert-plus"),PrivateKey=require("./private-key"),crypto=require("crypto"),MAX_CLASS_DEPTH=3,CIPHER_LEN={"des-ede3-cbc":{key:7,iv:8},"aes-128-cbc":{key:16,iv:16}},PKCS5_SALT_LEN=8;