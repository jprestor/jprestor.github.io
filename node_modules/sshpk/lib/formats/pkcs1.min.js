function read(e,t){return pem.read(e,t,"pkcs1")}function write(e,t){return pem.write(e,t,"pkcs1")}function readMPInt(e,t){return assert.strictEqual(e.peek(),asn1.Ber.Integer,t+" is not an Integer"),utils.mpNormalize(e.readString(asn1.Ber.Integer,!0))}function readPkcs1(e,t,r){switch(e){case"RSA":if("public"===t)return readPkcs1RSAPublic(r);if("private"===t)return readPkcs1RSAPrivate(r);throw new Error("Unknown key type: "+t);case"DSA":if("public"===t)return readPkcs1DSAPublic(r);if("private"===t)return readPkcs1DSAPrivate(r);throw new Error("Unknown key type: "+t);case"EC":case"ECDSA":if("private"===t)return readPkcs1ECDSAPrivate(r);if("public"===t)return readPkcs1ECDSAPublic(r);throw new Error("Unknown key type: "+t);default:throw new Error("Unknown key algo: "+e)}}function readPkcs1RSAPublic(e){var t=readMPInt(e,"modulus"),r=readMPInt(e,"exponent"),n={type:"rsa",parts:[{name:"e",data:r},{name:"n",data:t}]};return new Key(n)}function readPkcs1RSAPrivate(e){var t=readMPInt(e,"version");assert.strictEqual(t[0],0);var r=readMPInt(e,"modulus"),n=readMPInt(e,"public exponent"),i=readMPInt(e,"private exponent"),a=readMPInt(e,"prime1"),o=readMPInt(e,"prime2"),s=readMPInt(e,"exponent1"),u=readMPInt(e,"exponent2"),l=readMPInt(e,"iqmp"),c={type:"rsa",parts:[{name:"n",data:r},{name:"e",data:n},{name:"d",data:i},{name:"iqmp",data:l},{name:"p",data:a},{name:"q",data:o},{name:"dmodp",data:s},{name:"dmodq",data:u}]};return new PrivateKey(c)}function readPkcs1DSAPrivate(e){var t=readMPInt(e,"version");assert.strictEqual(t.readUInt8(0),0);var r=readMPInt(e,"p"),n=readMPInt(e,"q"),i=readMPInt(e,"g"),a=readMPInt(e,"y"),o=readMPInt(e,"x"),s={type:"dsa",parts:[{name:"p",data:r},{name:"q",data:n},{name:"g",data:i},{name:"y",data:a},{name:"x",data:o}]};return new PrivateKey(s)}function readPkcs1DSAPublic(e){var t=readMPInt(e,"y"),r=readMPInt(e,"p"),n=readMPInt(e,"q"),i=readMPInt(e,"g"),a={type:"dsa",parts:[{name:"y",data:t},{name:"p",data:r},{name:"q",data:n},{name:"g",data:i}]};return new Key(a)}function readPkcs1ECDSAPublic(e){e.readSequence();var t=e.readOID();assert.strictEqual(t,"1.2.840.10045.2.1","must be ecPublicKey");for(var n,r=e.readOID(),i=Object.keys(algs.curves),a=0;a<i.length;++a){var o=i[a],s=algs.curves[o];if(s.pkcs8oid===r){n=o;break}}assert.string(n,"a known ECDSA named curve");var u=e.readString(asn1.Ber.BitString,!0);u=utils.ecNormalize(u);var l={type:"ecdsa",parts:[{name:"curve",data:new Buffer(n)},{name:"Q",data:u}]};return new Key(l)}function readPkcs1ECDSAPrivate(e){var t=readMPInt(e,"version");assert.strictEqual(t.readUInt8(0),1);var r=e.readString(asn1.Ber.OctetString,!0);e.readSequence(160);var n=readECDSACurve(e);assert.string(n,"a known elliptic curve"),e.readSequence(161);var i=e.readString(asn1.Ber.BitString,!0);i=utils.ecNormalize(i);var a={type:"ecdsa",parts:[{name:"curve",data:new Buffer(n)},{name:"Q",data:i},{name:"d",data:r}]};return new PrivateKey(a)}function writePkcs1(e,t){switch(e.startSequence(),t.type){case"rsa":PrivateKey.isPrivateKey(t)?writePkcs1RSAPrivate(e,t):writePkcs1RSAPublic(e,t);break;case"dsa":PrivateKey.isPrivateKey(t)?writePkcs1DSAPrivate(e,t):writePkcs1DSAPublic(e,t);break;case"ecdsa":PrivateKey.isPrivateKey(t)?writePkcs1ECDSAPrivate(e,t):writePkcs1ECDSAPublic(e,t);break;default:throw new Error("Unknown key algo: "+t.type)}e.endSequence()}function writePkcs1RSAPublic(e,t){e.writeBuffer(t.part.n.data,asn1.Ber.Integer),e.writeBuffer(t.part.e.data,asn1.Ber.Integer)}function writePkcs1RSAPrivate(e,t){var r=new Buffer(1);r[0]=0,e.writeBuffer(r,asn1.Ber.Integer),e.writeBuffer(t.part.n.data,asn1.Ber.Integer),e.writeBuffer(t.part.e.data,asn1.Ber.Integer),e.writeBuffer(t.part.d.data,asn1.Ber.Integer),e.writeBuffer(t.part.p.data,asn1.Ber.Integer),e.writeBuffer(t.part.q.data,asn1.Ber.Integer),t.part.dmodp&&t.part.dmodq||utils.addRSAMissing(t),e.writeBuffer(t.part.dmodp.data,asn1.Ber.Integer),e.writeBuffer(t.part.dmodq.data,asn1.Ber.Integer),e.writeBuffer(t.part.iqmp.data,asn1.Ber.Integer)}function writePkcs1DSAPrivate(e,t){var r=new Buffer(1);r[0]=0,e.writeBuffer(r,asn1.Ber.Integer),e.writeBuffer(t.part.p.data,asn1.Ber.Integer),e.writeBuffer(t.part.q.data,asn1.Ber.Integer),e.writeBuffer(t.part.g.data,asn1.Ber.Integer),e.writeBuffer(t.part.y.data,asn1.Ber.Integer),e.writeBuffer(t.part.x.data,asn1.Ber.Integer)}function writePkcs1DSAPublic(e,t){e.writeBuffer(t.part.y.data,asn1.Ber.Integer),e.writeBuffer(t.part.p.data,asn1.Ber.Integer),e.writeBuffer(t.part.q.data,asn1.Ber.Integer),e.writeBuffer(t.part.g.data,asn1.Ber.Integer)}function writePkcs1ECDSAPublic(e,t){e.startSequence(),e.writeOID("1.2.840.10045.2.1");var r=t.part.curve.data.toString(),n=algs.curves[r].pkcs8oid;assert.string(n,"a known ECDSA named curve"),e.writeOID(n),e.endSequence();var i=utils.ecNormalize(t.part.Q.data,!0);e.writeBuffer(i,asn1.Ber.BitString)}function writePkcs1ECDSAPrivate(e,t){var r=new Buffer(1);r[0]=1,e.writeBuffer(r,asn1.Ber.Integer),e.writeBuffer(t.part.d.data,asn1.Ber.OctetString),e.startSequence(160);var n=t.part.curve.data.toString(),i=algs.curves[n].pkcs8oid;assert.string(i,"a known ECDSA named curve"),e.writeOID(i),e.endSequence(),e.startSequence(161);var a=utils.ecNormalize(t.part.Q.data,!0);e.writeBuffer(a,asn1.Ber.BitString),e.endSequence()}module.exports={read:read,readPkcs1:readPkcs1,write:write,writePkcs1:writePkcs1};var assert=require("assert-plus"),asn1=require("asn1"),algs=require("../algs"),utils=require("../utils"),Key=require("../key"),PrivateKey=require("../private-key"),pem=require("./pem"),pkcs8=require("./pkcs8"),readECDSACurve=pkcs8.readECDSACurve;