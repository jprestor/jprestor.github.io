function read(e,t){return pem.read(e,t)}function readSSHPrivate(e,t,r){t=new SSHBuffer({buffer:t});var n=t.readCString();assert.strictEqual(n,MAGIC,"bad magic string");var i=t.readString(),a=t.readString(),o=t.readBuffer(),s=t.readInt();if(1!==s)throw new Error("OpenSSH-format key file contains multiple keys: this is unsupported.");var u=t.readBuffer();if("public"===e)return assert.ok(t.atEnd(),"excess bytes left after key"),rfc4253.read(u);var l=t.readBuffer();assert.ok(t.atEnd(),"excess bytes left after key");var c=new SSHBuffer({buffer:o});switch(a){case"none":if("none"!==i)throw new Error('OpenSSH-format key uses KDF "none" but specifies a cipher other than "none"');break;case"bcrypt":var f=c.readBuffer(),p=c.readInt(),h=utils.opensshCipherInfo(i);if(void 0===bcrypt&&(bcrypt=require("bcrypt-pbkdf")),"string"==typeof r.passphrase&&(r.passphrase=new Buffer(r.passphrase,"utf-8")),!Buffer.isBuffer(r.passphrase))throw new errors.KeyEncryptedError(r.filename,"OpenSSH");var d=new Uint8Array(r.passphrase),m=new Uint8Array(f),v=new Uint8Array(h.keySize+h.blockSize),g=bcrypt.pbkdf(d,d.length,m,m.length,v,v.length,p);if(0!==g)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");v=new Buffer(v);var y=v.slice(0,h.keySize),b=v.slice(h.keySize,h.keySize+h.blockSize),w=crypto.createDecipheriv(h.opensslName,y,b);w.setAutoPadding(!1);var x,S=[];for(w.once("error",function(e){if(-1!==e.toString().indexOf("bad decrypt"))throw new Error("Incorrect passphrase supplied, could not decrypt key");throw e}),w.write(l),w.end();null!==(x=w.read());)S.push(x);l=Buffer.concat(S);break;default:throw new Error('OpenSSH-format key uses unknown KDF "'+a+'"')}t=new SSHBuffer({buffer:l});var E=t.readInt(),_=t.readInt();if(E!==_)throw new Error("Incorrect passphrase supplied, could not decrypt key");var k={},q=rfc4253.readInternal(k,"private",t.remainder());t.skip(k.consumed);var A=t.readString();return q.comment=A,q}function write(e,t){var r;r=PrivateKey.isPrivateKey(e)?e.toPublic():e;var s,n="none",i="none",a=new Buffer(0),o={blockSize:8};void 0!==t&&(s=t.passphrase,"string"==typeof s&&(s=new Buffer(s,"utf-8")),void 0!==s&&(assert.buffer(s,"options.passphrase"),assert.optionalString(t.cipher,"options.cipher"),n=t.cipher,void 0===n&&(n="aes128-ctr"),o=utils.opensshCipherInfo(n),i="bcrypt"));var u;if(PrivateKey.isPrivateKey(e)){u=new SSHBuffer({});var l=crypto.randomBytes(4).readUInt32BE(0);u.writeInt(l),u.writeInt(l),u.write(e.toBuffer("rfc4253")),u.writeString(e.comment||"");for(var c=1;u._offset%o.blockSize!==0;)u.writeChar(c++);u=u.toBuffer()}switch(i){case"none":break;case"bcrypt":var f=crypto.randomBytes(16),p=16,h=new SSHBuffer({});h.writeBuffer(f),h.writeInt(p),a=h.toBuffer(),void 0===bcrypt&&(bcrypt=require("bcrypt-pbkdf"));var d=new Uint8Array(s),m=new Uint8Array(f),v=new Uint8Array(o.keySize+o.blockSize),g=bcrypt.pbkdf(d,d.length,m,m.length,v,v.length,p);if(0!==g)throw new Error("bcrypt_pbkdf function returned failure, parameters invalid");v=new Buffer(v);var y=v.slice(0,o.keySize),b=v.slice(o.keySize,o.keySize+o.blockSize),w=crypto.createCipheriv(o.opensslName,y,b);w.setAutoPadding(!1);var x,S=[];for(w.once("error",function(e){throw e}),w.write(u),w.end();null!==(x=w.read());)S.push(x);u=Buffer.concat(S);break;default:throw new Error("Unsupported kdf "+i)}var E=new SSHBuffer({});E.writeCString(MAGIC),E.writeString(n),E.writeString(i),E.writeBuffer(a),E.writeInt(1),E.writeBuffer(r.toBuffer("rfc4253")),u&&E.writeBuffer(u),E=E.toBuffer();var _;_=PrivateKey.isPrivateKey(e)?"OPENSSH PRIVATE KEY":"OPENSSH PUBLIC KEY";var k=E.toString("base64"),q=k.length+k.length/70+18+16+2*_.length+10;E=new Buffer(q);var A=0;A+=E.write("-----BEGIN "+_+"-----\n",A);for(var C=0;C<k.length;){var j=C+70;j>k.length&&(j=k.length),A+=E.write(k.slice(C,j),A),E[A++]=10,C=j}return A+=E.write("-----END "+_+"-----\n",A),E.slice(0,A)}module.exports={read:read,readSSHPrivate:readSSHPrivate,write:write};var assert=require("assert-plus"),asn1=require("asn1"),algs=require("../algs"),utils=require("../utils"),crypto=require("crypto"),Key=require("../key"),PrivateKey=require("../private-key"),pem=require("./pem"),rfc4253=require("./rfc4253"),SSHBuffer=require("../ssh-buffer"),errors=require("../errors"),bcrypt,MAGIC="openssh-key-v1";