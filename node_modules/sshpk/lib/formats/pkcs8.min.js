function read(e,t){return pem.read(e,t,"pkcs8")}function write(e,t){return pem.write(e,t,"pkcs8")}function readMPInt(e,t){return assert.strictEqual(e.peek(),asn1.Ber.Integer,t+" is not an Integer"),utils.mpNormalize(e.readString(asn1.Ber.Integer,!0))}function readPkcs8(e,t,r){r.peek()===asn1.Ber.Integer&&(assert.strictEqual(t,"private","unexpected Integer at start of public key"),r.readString(asn1.Ber.Integer,!0)),r.readSequence();var n=r.offset+r.length,i=r.readOID();switch(i){case"1.2.840.113549.1.1.1":return r._offset=n,"public"===t?readPkcs8RSAPublic(r):readPkcs8RSAPrivate(r);case"1.2.840.10040.4.1":return"public"===t?readPkcs8DSAPublic(r):readPkcs8DSAPrivate(r);case"1.2.840.10045.2.1":return"public"===t?readPkcs8ECDSAPublic(r):readPkcs8ECDSAPrivate(r);default:throw new Error("Unknown key type OID "+i)}}function readPkcs8RSAPublic(e){e.readSequence(asn1.Ber.BitString),e.readByte(),e.readSequence();var t=readMPInt(e,"modulus"),r=readMPInt(e,"exponent"),n={type:"rsa",source:e.originalInput,parts:[{name:"e",data:r},{name:"n",data:t}]};return new Key(n)}function readPkcs8RSAPrivate(e){e.readSequence(asn1.Ber.OctetString),e.readSequence();var t=readMPInt(e,"version");assert.equal(t[0],0,"unknown RSA private key version");var r=readMPInt(e,"modulus"),n=readMPInt(e,"public exponent"),i=readMPInt(e,"private exponent"),a=readMPInt(e,"prime1"),o=readMPInt(e,"prime2"),s=readMPInt(e,"exponent1"),u=readMPInt(e,"exponent2"),l=readMPInt(e,"iqmp"),c={type:"rsa",parts:[{name:"n",data:r},{name:"e",data:n},{name:"d",data:i},{name:"iqmp",data:l},{name:"p",data:a},{name:"q",data:o},{name:"dmodp",data:s},{name:"dmodq",data:u}]};return new PrivateKey(c)}function readPkcs8DSAPublic(e){e.readSequence();var t=readMPInt(e,"p"),r=readMPInt(e,"q"),n=readMPInt(e,"g");e.readSequence(asn1.Ber.BitString),e.readByte();var i=readMPInt(e,"y"),a={type:"dsa",parts:[{name:"p",data:t},{name:"q",data:r},{name:"g",data:n},{name:"y",data:i}]};return new Key(a)}function readPkcs8DSAPrivate(e){e.readSequence();var t=readMPInt(e,"p"),r=readMPInt(e,"q"),n=readMPInt(e,"g");e.readSequence(asn1.Ber.OctetString);var i=readMPInt(e,"x"),a=utils.calculateDSAPublic(n,t,i),o={type:"dsa",parts:[{name:"p",data:t},{name:"q",data:r},{name:"g",data:n},{name:"y",data:a},{name:"x",data:i}]};return new PrivateKey(o)}function readECDSACurve(e){var t,r,n,i,a;if(e.peek()===asn1.Ber.OID){var o=e.readOID();for(r=Object.keys(algs.curves),n=0;n<r.length;++n)if(i=r[n],a=algs.curves[i],a.pkcs8oid===o){t=i;break}}else{e.readSequence();var s=e.readString(asn1.Ber.Integer,!0);assert.strictEqual(s[0],1,"ECDSA key not version 1");var u={};e.readSequence();var l=e.readOID();assert.strictEqual(l,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var c=u.p=utils.mpNormalize(e.readString(asn1.Ber.Integer,!0));u.size=8*c.length-utils.countZeros(c),e.readSequence(),u.a=utils.mpNormalize(e.readString(asn1.Ber.OctetString,!0)),u.b=utils.mpNormalize(e.readString(asn1.Ber.OctetString,!0)),e.peek()===asn1.Ber.BitString&&(u.s=e.readString(asn1.Ber.BitString,!0)),u.G=e.readString(asn1.Ber.OctetString,!0),assert.strictEqual(u.G[0],4,"uncompressed G is required"),u.n=utils.mpNormalize(e.readString(asn1.Ber.Integer,!0)),u.h=utils.mpNormalize(e.readString(asn1.Ber.Integer,!0)),assert.strictEqual(u.h[0],1,"a cofactor=1 curve is required"),r=Object.keys(algs.curves);var f=Object.keys(u);for(n=0;n<r.length;++n){i=r[n],a=algs.curves[i];for(var p=!0,h=0;h<f.length;++h){var d=f[h];if(void 0!==a[d])if("object"==typeof a[d]&&void 0!==a[d].equals){if(!a[d].equals(u[d])){p=!1;break}}else if(Buffer.isBuffer(a[d])){if(a[d].toString("binary")!==u[d].toString("binary")){p=!1;break}}else if(a[d]!==u[d]){p=!1;break}}if(p){t=i;break}}}return t}function readPkcs8ECDSAPrivate(e){var t=readECDSACurve(e);assert.string(t,"a known elliptic curve"),e.readSequence(asn1.Ber.OctetString),e.readSequence();var r=readMPInt(e,"version");assert.equal(r[0],1,"unknown version of ECDSA key");var n=e.readString(asn1.Ber.OctetString,!0);e.readSequence(161);var i=e.readString(asn1.Ber.BitString,!0);i=utils.ecNormalize(i);var a={type:"ecdsa",parts:[{name:"curve",data:new Buffer(t)},{name:"Q",data:i},{name:"d",data:n}]};return new PrivateKey(a)}function readPkcs8ECDSAPublic(e){var t=readECDSACurve(e);assert.string(t,"a known elliptic curve");var r=e.readString(asn1.Ber.BitString,!0);r=utils.ecNormalize(r);var n={type:"ecdsa",parts:[{name:"curve",data:new Buffer(t)},{name:"Q",data:r}]};return new Key(n)}function writePkcs8(e,t){if(e.startSequence(),PrivateKey.isPrivateKey(t)){var r=new Buffer(1);r[0]=0,e.writeBuffer(r,asn1.Ber.Integer)}switch(e.startSequence(),t.type){case"rsa":e.writeOID("1.2.840.113549.1.1.1"),PrivateKey.isPrivateKey(t)?writePkcs8RSAPrivate(t,e):writePkcs8RSAPublic(t,e);break;case"dsa":e.writeOID("1.2.840.10040.4.1"),PrivateKey.isPrivateKey(t)?writePkcs8DSAPrivate(t,e):writePkcs8DSAPublic(t,e);break;case"ecdsa":e.writeOID("1.2.840.10045.2.1"),PrivateKey.isPrivateKey(t)?writePkcs8ECDSAPrivate(t,e):writePkcs8ECDSAPublic(t,e);break;default:throw new Error("Unsupported key type: "+t.type)}e.endSequence()}function writePkcs8RSAPrivate(e,t){t.writeNull(),t.endSequence(),t.startSequence(asn1.Ber.OctetString),t.startSequence();var r=new Buffer(1);r[0]=0,t.writeBuffer(r,asn1.Ber.Integer),t.writeBuffer(e.part.n.data,asn1.Ber.Integer),t.writeBuffer(e.part.e.data,asn1.Ber.Integer),t.writeBuffer(e.part.d.data,asn1.Ber.Integer),t.writeBuffer(e.part.p.data,asn1.Ber.Integer),t.writeBuffer(e.part.q.data,asn1.Ber.Integer),e.part.dmodp&&e.part.dmodq||utils.addRSAMissing(e),t.writeBuffer(e.part.dmodp.data,asn1.Ber.Integer),t.writeBuffer(e.part.dmodq.data,asn1.Ber.Integer),t.writeBuffer(e.part.iqmp.data,asn1.Ber.Integer),t.endSequence(),t.endSequence()}function writePkcs8RSAPublic(e,t){t.writeNull(),t.endSequence(),t.startSequence(asn1.Ber.BitString),t.writeByte(0),t.startSequence(),t.writeBuffer(e.part.n.data,asn1.Ber.Integer),t.writeBuffer(e.part.e.data,asn1.Ber.Integer),t.endSequence(),t.endSequence()}function writePkcs8DSAPrivate(e,t){t.startSequence(),t.writeBuffer(e.part.p.data,asn1.Ber.Integer),t.writeBuffer(e.part.q.data,asn1.Ber.Integer),t.writeBuffer(e.part.g.data,asn1.Ber.Integer),t.endSequence(),t.endSequence(),t.startSequence(asn1.Ber.OctetString),t.writeBuffer(e.part.x.data,asn1.Ber.Integer),t.endSequence()}function writePkcs8DSAPublic(e,t){t.startSequence(),t.writeBuffer(e.part.p.data,asn1.Ber.Integer),t.writeBuffer(e.part.q.data,asn1.Ber.Integer),t.writeBuffer(e.part.g.data,asn1.Ber.Integer),t.endSequence(),t.endSequence(),t.startSequence(asn1.Ber.BitString),t.writeByte(0),t.writeBuffer(e.part.y.data,asn1.Ber.Integer),t.endSequence()}function writeECDSACurve(e,t){var r=algs.curves[e.curve];if(r.pkcs8oid)t.writeOID(r.pkcs8oid);else{t.startSequence();var n=new Buffer(1);n.writeUInt8(1,0),t.writeBuffer(n,asn1.Ber.Integer),t.startSequence(),t.writeOID("1.2.840.10045.1.1"),t.writeBuffer(r.p,asn1.Ber.Integer),t.endSequence(),t.startSequence();var i=r.p;0===i[0]&&(i=i.slice(1)),t.writeBuffer(i,asn1.Ber.OctetString),t.writeBuffer(r.b,asn1.Ber.OctetString),t.writeBuffer(r.s,asn1.Ber.BitString),t.endSequence(),t.writeBuffer(r.G,asn1.Ber.OctetString),t.writeBuffer(r.n,asn1.Ber.Integer);var a=r.h;a||(a=new Buffer(1),a[0]=1),t.writeBuffer(a,asn1.Ber.Integer),t.endSequence()}}function writePkcs8ECDSAPublic(e,t){writeECDSACurve(e,t),t.endSequence();var r=utils.ecNormalize(e.part.Q.data,!0);t.writeBuffer(r,asn1.Ber.BitString)}function writePkcs8ECDSAPrivate(e,t){writeECDSACurve(e,t),t.endSequence(),t.startSequence(asn1.Ber.OctetString),t.startSequence();var r=new Buffer(1);r[0]=1,t.writeBuffer(r,asn1.Ber.Integer),t.writeBuffer(e.part.d.data,asn1.Ber.OctetString),t.startSequence(161);var n=utils.ecNormalize(e.part.Q.data,!0);t.writeBuffer(n,asn1.Ber.BitString),t.endSequence(),t.endSequence(),t.endSequence()}module.exports={read:read,readPkcs8:readPkcs8,write:write,writePkcs8:writePkcs8,readECDSACurve:readECDSACurve,writeECDSACurve:writeECDSACurve};var assert=require("assert-plus"),asn1=require("asn1"),algs=require("../algs"),utils=require("../utils"),Key=require("../key"),PrivateKey=require("../private-key"),pem=require("./pem");