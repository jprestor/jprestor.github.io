function algToKeyType(e){if(assert.string(e),"ssh-dss"===e)return"dsa";if("ssh-rsa"===e)return"rsa";if("ssh-ed25519"===e)return"ed25519";if("ssh-curve25519"===e)return"curve25519";if(e.match(/^ecdsa-sha2-/))return"ecdsa";throw new Error("Unknown algorithm "+e)}function keyTypeToAlg(e){if(assert.object(e),"dsa"===e.type)return"ssh-dss";if("rsa"===e.type)return"ssh-rsa";if("ed25519"===e.type)return"ssh-ed25519";if("curve25519"===e.type)return"ssh-curve25519";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.part.curve.data.toString();throw new Error("Unknown key type "+e.type)}function read(e,t,r,n){"string"==typeof r&&(r=new Buffer(r)),assert.buffer(r,"buf");var i={},a=i.parts=[],o=new SSHBuffer({buffer:r}),s=o.readString();assert.ok(!o.atEnd(),"key must have at least one part"),i.type=algToKeyType(s);var u=algs.info[i.type].parts.length;for(t&&"private"===t&&(u=algs.privInfo[i.type].parts.length);!o.atEnd()&&a.length<u;)a.push(o.readPart());for(;!e&&!o.atEnd();)a.push(o.readPart());assert.ok(a.length>=1,"key must have at least one part"),assert.ok(e||o.atEnd(),"leftover bytes at end of key");var l=Key,c=algs.info[i.type];if(("private"===t||c.parts.length!==a.length)&&(c=algs.privInfo[i.type],l=PrivateKey),assert.strictEqual(c.parts.length,a.length),"ecdsa"===i.type){var f=/^ecdsa-sha2-(.+)$/.exec(s);assert.ok(null!==f),assert.strictEqual(f[1],a[0].data.toString())}for(var p=!0,h=0;h<c.parts.length;++h)if(a[h].name=c.parts[h],"curve"!==a[h].name&&c.normalize!==!1){var d=a[h],m=utils.mpNormalize(d.data);m!==d.data&&(d.data=m,p=!1)}return p&&(i._rfc4253Cache=o.toBuffer()),e&&"object"==typeof e&&(e.remainder=o.remainder(),e.consumed=o._offset),new l(i)}function write(e,t){assert.object(e);var n,r=keyTypeToAlg(e),i=algs.info[e.type];PrivateKey.isPrivateKey(e)&&(i=algs.privInfo[e.type]);var a=i.parts,o=new SSHBuffer({});for(o.writeString(r),n=0;n<a.length;++n){var s=e.part[a[n]].data;i.normalize!==!1&&(s=utils.mpNormalize(s)),o.writeBuffer(s)}return o.toBuffer()}module.exports={read:read.bind(void 0,!1,void 0),readType:read.bind(void 0,!1),write:write,readPartial:read.bind(void 0,!0),readInternal:read,keyTypeToAlg:keyTypeToAlg,algToKeyType:algToKeyType};var assert=require("assert-plus"),algs=require("../algs"),utils=require("../utils"),Key=require("../key"),PrivateKey=require("../private-key"),SSHBuffer=require("../ssh-buffer");