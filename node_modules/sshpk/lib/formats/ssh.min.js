function read(e,t){"string"!=typeof e&&(assert.buffer(e,"buf"),e=e.toString("ascii"));var r=e.trim().replace(/[\\\r]/g,""),n=r.match(SSHKEY_RE);n||(n=r.match(SSHKEY_RE2)),assert.ok(n,"key must match regex");var o,i=rfc4253.algToKeyType(n[1]),a=new Buffer(n[2],"base64"),s={};if(n[4])try{o=rfc4253.read(a)}catch(u){n=r.match(SSHKEY_RE2),assert.ok(n,"key must match regex"),a=new Buffer(n[2],"base64"),o=rfc4253.readInternal(s,"public",a)}else o=rfc4253.readInternal(s,"public",a);if(assert.strictEqual(i,o.type),n[4]&&n[4].length>0)o.comment=n[4];else if(s.consumed){var l=n[2]+n[3],c=4*Math.ceil(s.consumed/3);l=l.slice(0,c-2).replace(/[^a-zA-Z0-9+\/=]/g,"")+l.slice(c-2);var f=s.consumed%3;for(f>0&&"="!==l.slice(c-1,c)&&c--;"="===l.slice(c,c+1);)c++;var p=l.slice(c);p=p.replace(/[\r\n]/g," ").replace(/^\s+/,""),p.match(/^[a-zA-Z0-9]/)&&(o.comment=p)}return o}function write(e,t){if(assert.object(e),!Key.isKey(e))throw new Error("Must be a public key");var r=[],n=rfc4253.keyTypeToAlg(e);r.push(n);var i=rfc4253.write(e);return r.push(i.toString("base64")),e.comment&&r.push(e.comment),new Buffer(r.join(" "))}module.exports={read:read,write:write};var assert=require("assert-plus"),rfc4253=require("./rfc4253"),utils=require("../utils"),Key=require("../key"),PrivateKey=require("../private-key"),sshpriv=require("./ssh-private"),SSHKEY_RE=/^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([\n \t]+([^\n]+))?$/,SSHKEY_RE2=/^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/ \t\n]+[=]*)(.*)$/;