function verify(e,t){return!1}function read(e,t){Buffer.isBuffer(e)&&(e=e.toString("ascii"));var r=e.trim().split(/[ \t\n]+/g);if(r.length<2||r.length>3)throw new Error("Not a valid SSH certificate line");var n=r[0],i=r[1];return i=new Buffer(i,"base64"),fromBuffer(i,n)}function fromBuffer(e,t,r){var n=new SSHBuffer({buffer:e}),i=n.readString();if(void 0!==t&&i!==t)throw new Error("SSH certificate algorithm mismatch");void 0===t&&(t=i);var a={};a.signatures={},a.signatures.openssh={},a.signatures.openssh.nonce=n.readBuffer();var o={},s=o.parts=[];o.type=getAlg(t);for(var u=algs.info[o.type].parts.length;s.length<u;)s.push(n.readPart());assert.ok(s.length>=1,"key must have at least one part");var l=algs.info[o.type];if("ecdsa"===o.type){var c=ECDSA_ALGO.exec(t);assert.ok(null!==c),assert.strictEqual(c[1],s[0].data.toString())}for(var f=0;f<l.parts.length;++f)if(s[f].name=l.parts[f],"curve"!==s[f].name&&l.normalize!==!1){var p=s[f];p.data=utils.mpNormalize(p.data)}a.subjectKey=new Key(o),a.serial=n.readInt64();var h=TYPES[n.readInt()];assert.string(h,"valid cert type"),a.signatures.openssh.keyId=n.readString();for(var d=[],m=n.readBuffer(),v=new SSHBuffer({buffer:m});!v.atEnd();)d.push(v.readString());0===d.length&&(d=["*"]),a.subjects=d.map(function(e){if("user"===h)return Identity.forUser(e);if("host"===h)return Identity.forHost(e);throw new Error("Unknown identity type "+h)}),a.validFrom=int64ToDate(n.readInt64()),a.validUntil=int64ToDate(n.readInt64()),a.signatures.openssh.critical=n.readBuffer(),a.signatures.openssh.exts=n.readBuffer(),n.readBuffer();var g=n.readBuffer();a.issuerKey=rfc4253.read(g),a.issuer=Identity.forHost("**");var y=n.readBuffer();return a.signatures.openssh.signature=Signature.parse(y,a.issuerKey.type,"ssh"),void 0!==r&&(r.remainder=n.remainder(),r.consumed=n._offset),new Certificate(a)}function int64ToDate(e){var t=4294967296*e.readUInt32BE(0);t+=e.readUInt32BE(4);var r=new Date;return r.setTime(1e3*t),r.sourceInt64=e,r}function dateToInt64(e){if(void 0!==e.sourceInt64)return e.sourceInt64;var t=Math.round(e.getTime()/1e3),r=Math.floor(t/4294967296),n=Math.floor(t%4294967296),i=new Buffer(8);return i.writeUInt32BE(r,0),i.writeUInt32BE(n,4),i}function sign(e,t){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var r=toBuffer(e,!0)}catch(n){return delete e.signatures.openssh,!1}var i=e.signatures.openssh,a=void 0;("rsa"===t.type||"dsa"===t.type)&&(a="sha1");var o=t.createSign(a);return o.write(r),i.signature=o.sign(),!0}function signAsync(e,t,r){void 0===e.signatures.openssh&&(e.signatures.openssh={});try{var n=toBuffer(e,!0)}catch(i){return delete e.signatures.openssh,void r(i)}var a=e.signatures.openssh;t(n,function(e,t){if(e)return void r(e);try{t.toBuffer("ssh")}catch(n){return void r(n)}a.signature=t,r()})}function write(e,t){void 0===t&&(t={});var r=toBuffer(e),n=getCertType(e.subjectKey)+" "+r.toString("base64");return t.comment&&(n=n+" "+t.comment),n}function toBuffer(e,t){assert.object(e.signatures.openssh,"signature for openssh format");var r=e.signatures.openssh;void 0===r.nonce&&(r.nonce=crypto.randomBytes(16));var n=new SSHBuffer({});n.writeString(getCertType(e.subjectKey)),n.writeBuffer(r.nonce);var i=e.subjectKey,a=algs.info[i.type];a.parts.forEach(function(e){n.writePart(i.part[e])}),n.writeInt64(e.serial);var o=e.subjects[0].type;assert.notStrictEqual(o,"unknown"),e.subjects.forEach(function(e){assert.strictEqual(e.type,o)}),o=TYPES[o],n.writeInt(o),void 0===r.keyId&&(r.keyId=e.subjects[0].type+"_"+(e.subjects[0].uid||e.subjects[0].hostname)),n.writeString(r.keyId);var s=new SSHBuffer({});return e.subjects.forEach(function(e){o===TYPES.host?s.writeString(e.hostname):o===TYPES.user&&s.writeString(e.uid)}),n.writeBuffer(s.toBuffer()),n.writeInt64(dateToInt64(e.validFrom)),n.writeInt64(dateToInt64(e.validUntil)),void 0===r.critical&&(r.critical=new Buffer(0)),n.writeBuffer(r.critical),void 0===r.exts&&(r.exts=new Buffer(0)),n.writeBuffer(r.exts),n.writeBuffer(new Buffer(0)),s=rfc4253.write(e.issuerKey),n.writeBuffer(s),t||n.writeBuffer(r.signature.toBuffer("ssh")),n.toBuffer()}function getAlg(e){if("ssh-rsa-cert-v01@openssh.com"===e)return"rsa";if("ssh-dss-cert-v01@openssh.com"===e)return"dsa";if(e.match(ECDSA_ALGO))return"ecdsa";if("ssh-ed25519-cert-v01@openssh.com"===e)return"ed25519";throw new Error("Unsupported cert type "+e)}function getCertType(e){if("rsa"===e.type)return"ssh-rsa-cert-v01@openssh.com";if("dsa"===e.type)return"ssh-dss-cert-v01@openssh.com";if("ecdsa"===e.type)return"ecdsa-sha2-"+e.curve+"-cert-v01@openssh.com";if("ed25519"===e.type)return"ssh-ed25519-cert-v01@openssh.com";throw new Error("Unsupported key type "+e.type)}module.exports={read:read,verify:verify,sign:sign,signAsync:signAsync,write:write,fromBuffer:fromBuffer,toBuffer:toBuffer};var assert=require("assert-plus"),SSHBuffer=require("../ssh-buffer"),crypto=require("crypto"),algs=require("../algs"),Key=require("../key"),PrivateKey=require("../private-key"),Identity=require("../identity"),rfc4253=require("./rfc4253"),Signature=require("../signature"),utils=require("../utils"),Certificate=require("../certificate"),TYPES={user:1,host:2};Object.keys(TYPES).forEach(function(e){TYPES[TYPES[e]]=e});var ECDSA_ALGO=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;