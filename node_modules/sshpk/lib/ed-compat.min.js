function Verifier(e,t){if(void 0===nacl&&(nacl=require("tweetnacl")),"sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],stream.Writable.call(this,{})}function Signer(e,t){if(void 0===nacl&&(nacl=require("tweetnacl")),"sha512"!==t.toLowerCase())throw new Error("ED25519 only supports the use of SHA-512 hashes");this.key=e,this.chunks=[],stream.Writable.call(this,{})}module.exports={Verifier:Verifier,Signer:Signer};var nacl,stream=require("stream"),util=require("util"),assert=require("assert-plus"),Signature=require("./signature");util.inherits(Verifier,stream.Writable),Verifier.prototype._write=function(e,t,r){this.chunks.push(e),r()},Verifier.prototype.update=function(e){"string"==typeof e&&(e=new Buffer(e,"binary")),this.chunks.push(e)},Verifier.prototype.verify=function(e,t){var r;if(Signature.isSignature(e,[2,0])){if("ed25519"!==e.type)return!1;r=e.toBuffer("raw")}else if("string"==typeof e)r=new Buffer(e,"base64");else if(Signature.isSignature(e,[1,0]))throw new Error("signature was created by too old a version of sshpk and cannot be verified");return assert.buffer(r),nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)),new Uint8Array(r),new Uint8Array(this.key.part.R.data))},util.inherits(Signer,stream.Writable),Signer.prototype._write=function(e,t,r){this.chunks.push(e),r()},Signer.prototype.update=function(e){"string"==typeof e&&(e=new Buffer(e,"binary")),this.chunks.push(e)},Signer.prototype.sign=function(){var e=nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)),new Uint8Array(this.key.part.r.data)),t=new Buffer(e),r=Signature.parse(t,"ed25519","raw");return r.hashAlgorithm="sha512",r};