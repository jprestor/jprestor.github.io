function Key(e){assert.object(e,"options"),assert.arrayOfObject(e.parts,"options.parts"),assert.string(e.type,"options.type"),assert.optionalString(e.comment,"options.comment");var t=algs.info[e.type];if("object"!=typeof t)throw new InvalidAlgorithmError(e.type);for(var r={},n=0;n<e.parts.length;++n){var i=e.parts[n];r[i.name]=i}this.type=e.type,this.parts=e.parts,this.part=r,this.comment=void 0,this.source=e.source,this._rfc4253Cache=e._rfc4253Cache,this._hashCache={};var a;if(this.curve=void 0,"ecdsa"===this.type){var o=this.part.curve.data.toString();this.curve=o,a=algs.curves[o].size}else if("ed25519"===this.type||"curve25519"===this.type)a=256,this.curve="curve25519";else{var s=this.part[t.sizePart];a=s.data.length,a=8*a-utils.countZeros(s.data)}this.size=a}module.exports=Key;var assert=require("assert-plus"),algs=require("./algs"),crypto=require("crypto"),Fingerprint=require("./fingerprint"),Signature=require("./signature"),DiffieHellman=require("./dhe").DiffieHellman,errs=require("./errors"),utils=require("./utils"),PrivateKey=require("./private-key"),edCompat;try{edCompat=require("./ed-compat")}catch(e){}var InvalidAlgorithmError=errs.InvalidAlgorithmError,KeyParseError=errs.KeyParseError,formats={};formats.auto=require("./formats/auto"),formats.pem=require("./formats/pem"),formats.pkcs1=require("./formats/pkcs1"),formats.pkcs8=require("./formats/pkcs8"),formats.rfc4253=require("./formats/rfc4253"),formats.ssh=require("./formats/ssh"),formats["ssh-private"]=require("./formats/ssh-private"),formats.openssh=formats["ssh-private"],Key.formats=formats,Key.prototype.toBuffer=function(e,t){return void 0===e&&(e="ssh"),assert.string(e,"format"),assert.object(formats[e],"formats[format]"),assert.optionalObject(t,"options"),"rfc4253"===e?(void 0===this._rfc4253Cache&&(this._rfc4253Cache=formats.rfc4253.write(this)),this._rfc4253Cache):formats[e].write(this,t)},Key.prototype.toString=function(e,t){return this.toBuffer(e,t).toString()},Key.prototype.hash=function(e){if(assert.string(e,"algorithm"),e=e.toLowerCase(),void 0===algs.hashAlgs[e])throw new InvalidAlgorithmError(e);if(this._hashCache[e])return this._hashCache[e];var t=crypto.createHash(e).update(this.toBuffer("rfc4253")).digest();return this._hashCache[e]=t,t},Key.prototype.fingerprint=function(e){void 0===e&&(e="sha256"),assert.string(e,"algorithm");var t={type:"key",hash:this.hash(e),algorithm:e};return new Fingerprint(t)},Key.prototype.defaultHashAlgorithm=function(){var e="sha1";return"rsa"===this.type&&(e="sha256"),"dsa"===this.type&&this.size>1024&&(e="sha256"),"ed25519"===this.type&&(e="sha512"),"ecdsa"===this.type&&(e=this.size<=256?"sha256":this.size<=384?"sha384":"sha512"),e},Key.prototype.createVerify=function(e){if(void 0===e&&(e=this.defaultHashAlgorithm()),assert.string(e,"hash algorithm"),"ed25519"===this.type&&void 0!==edCompat)return new edCompat.Verifier(this,e);if("curve25519"===this.type)throw new Error("Curve25519 keys are not suitable for signing or verification");var t,r,n;try{r=e.toUpperCase(),t=crypto.createVerify(r)}catch(i){n=i}(void 0===t||n instanceof Error&&n.message.match(/Unknown message digest/))&&(r="RSA-",r+=e.toUpperCase(),t=crypto.createVerify(r)),assert.ok(t,"failed to create verifier");var a=t.verify.bind(t),o=this.toBuffer("pkcs8"),s=this.curve,u=this;return t.verify=function(t,r){if(Signature.isSignature(t,[2,0]))return t.type!==u.type?!1:t.hashAlgorithm&&t.hashAlgorithm!==e?!1:t.curve&&"ecdsa"===u.type&&t.curve!==s?!1:a(o,t.toBuffer("asn1"));if("string"==typeof t||Buffer.isBuffer(t))return a(o,t,r);throw Signature.isSignature(t,[1,0])?new Error("signature was created by too old a version of sshpk and cannot be verified"):new TypeError("signature must be a string, Buffer, or Signature object")},t},Key.prototype.createDiffieHellman=function(){if("rsa"===this.type)throw new Error("RSA keys do not support Diffie-Hellman");return new DiffieHellman(this)},Key.prototype.createDH=Key.prototype.createDiffieHellman,Key.parse=function(e,t,r){"string"!=typeof e&&assert.buffer(e,"data"),void 0===t&&(t="auto"),assert.string(t,"format"),"string"==typeof r&&(r={filename:r}),assert.optionalObject(r,"options"),void 0===r&&(r={}),assert.optionalString(r.filename,"options.filename"),void 0===r.filename&&(r.filename="(unnamed)"),assert.object(formats[t],"formats[format]");try{var n=formats[t].read(e,r);return n instanceof PrivateKey&&(n=n.toPublic()),n.comment||(n.comment=r.filename),n}catch(i){if("KeyEncryptedError"===i.name)throw i;throw new KeyParseError(r.filename,t,i)}},Key.isKey=function(e,t){return utils.isCompatible(e,Key,t)},Key.prototype._sshpkApiVersion=[1,5],Key._oldVersionDetect=function(e){return assert.func(e.toBuffer),assert.func(e.fingerprint),e.createDH?[1,4]:e.defaultHashAlgorithm?[1,3]:e.formats.auto?[1,2]:e.formats.pkcs1?[1,1]:[1,0]};