function Signature(e){assert.object(e,"options"),assert.arrayOfObject(e.parts,"options.parts"),assert.string(e.type,"options.type");for(var t={},r=0;r<e.parts.length;++r){var n=e.parts[r];t[n.name]=n}this.type=e.type,this.hashAlgorithm=e.hashAlgo,this.curve=e.curve,this.parts=e.parts,this.part=t}function parseOneNum(e,t,r,n){if("ssh"===r){try{var i=new SSHBuffer({buffer:e}),a=i.readString()}catch(o){}if(void 0!==i){var s="SSH signature does not match expected type (expected "+t+", got "+a+")";switch(a){case"ssh-rsa":assert.strictEqual(t,"rsa",s),n.hashAlgo="sha1";break;case"rsa-sha2-256":assert.strictEqual(t,"rsa",s),n.hashAlgo="sha256";break;case"rsa-sha2-512":assert.strictEqual(t,"rsa",s),n.hashAlgo="sha512";break;case"ssh-ed25519":assert.strictEqual(t,"ed25519",s),n.hashAlgo="sha512";break;default:throw new Error("Unknown SSH signature type: "+a)}var u=i.readPart();return assert.ok(i.atEnd(),"extra trailing bytes"),u.name="sig",n.parts.push(u),new Signature(n)}}return n.parts.push({name:"sig",data:e}),new Signature(n)}function parseDSAasn1(e,t,r,n){var i=new asn1.BerReader(e);i.readSequence();var a=i.readString(asn1.Ber.Integer,!0),o=i.readString(asn1.Ber.Integer,!0);return n.parts.push({name:"r",data:utils.mpNormalize(a)}),n.parts.push({name:"s",data:utils.mpNormalize(o)}),new Signature(n)}function parseDSA(e,t,r,n){if(40!=e.length){var i=new SSHBuffer({buffer:e}),a=i.readBuffer();"ssh-dss"===a.toString("ascii")&&(a=i.readBuffer()),assert.ok(i.atEnd(),"extra trailing bytes"),assert.strictEqual(a.length,40,"invalid inner length"),e=a}return n.parts.push({name:"r",data:e.slice(0,20)}),n.parts.push({name:"s",data:e.slice(20,40)}),new Signature(n)}function parseECDSA(e,t,r,n){var a,o,i=new SSHBuffer({buffer:e}),s=i.readBuffer(),u=s.toString("ascii");if("ecdsa-"===u.slice(0,6)){var l=u.split("-");switch(assert.strictEqual(l[0],"ecdsa"),assert.strictEqual(l[1],"sha2"),n.curve=l[2],n.curve){case"nistp256":n.hashAlgo="sha256";break;case"nistp384":n.hashAlgo="sha384";break;case"nistp521":n.hashAlgo="sha512";break;default:throw new Error("Unsupported ECDSA curve: "+n.curve)}s=i.readBuffer(),assert.ok(i.atEnd(),"extra trailing bytes on outer"),i=new SSHBuffer({buffer:s}),a=i.readPart()}else a={data:s};return o=i.readPart(),assert.ok(i.atEnd(),"extra trailing bytes"),a.name="r",o.name="s",n.parts.push(a),n.parts.push(o),new Signature(n)}module.exports=Signature;var assert=require("assert-plus"),algs=require("./algs"),crypto=require("crypto"),errs=require("./errors"),utils=require("./utils"),asn1=require("asn1"),SSHBuffer=require("./ssh-buffer"),InvalidAlgorithmError=errs.InvalidAlgorithmError,SignatureParseError=errs.SignatureParseError;Signature.prototype.toBuffer=function(e){void 0===e&&(e="asn1"),assert.string(e,"format");var t,r="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":r="rsa-sha2-256";break;case"sha512":r="rsa-sha2-512";break;case"sha1":case void 0:break;default:throw new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm)}return"ssh"===e?(t=new SSHBuffer({}),t.writeString(r),t.writePart(this.part.sig),t.toBuffer()):this.part.sig.data;case"ed25519":return"ssh"===e?(t=new SSHBuffer({}),t.writeString(r),t.writePart(this.part.sig),t.toBuffer()):this.part.sig.data;case"dsa":case"ecdsa":var n,i;if("asn1"===e){var a=new asn1.BerWriter;return a.startSequence(),n=utils.mpNormalize(this.part.r.data),i=utils.mpNormalize(this.part.s.data),a.writeBuffer(n,asn1.Ber.Integer),a.writeBuffer(i,asn1.Ber.Integer),a.endSequence(),a.buffer}if("ssh"===e&&"dsa"===this.type){if(t=new SSHBuffer({}),t.writeString("ssh-dss"),n=this.part.r.data,n.length>20&&0===n[0]&&(n=n.slice(1)),i=this.part.s.data,i.length>20&&0===i[0]&&(i=i.slice(1)),this.hashAlgorithm&&"sha1"!==this.hashAlgorithm||n.length+i.length!==40)throw new Error("OpenSSH only supports DSA signatures with SHA1 hash");return t.writeBuffer(Buffer.concat([n,i])),t.toBuffer()}if("ssh"===e&&"ecdsa"===this.type){var o=new SSHBuffer({});n=this.part.r.data,o.writeBuffer(n),o.writePart(this.part.s),t=new SSHBuffer({});var s;0===n[0]&&(n=n.slice(1));var u=8*n.length;return 256===u?s="nistp256":384===u?s="nistp384":528===u&&(s="nistp521"),t.writeString("ecdsa-sha2-"+s),t.writeBuffer(o.toBuffer()),t.toBuffer()}throw new Error("Invalid signature format");default:throw new Error("Invalid signature data")}},Signature.prototype.toString=function(e){return assert.optionalString(e,"format"),this.toBuffer(e).toString("base64")},Signature.parse=function(e,t,r){"string"==typeof e&&(e=new Buffer(e,"base64")),assert.buffer(e,"data"),assert.string(r,"format"),assert.string(t,"type");var n={};n.type=t.toLowerCase(),n.parts=[];try{switch(assert.ok(e.length>0,"signature must not be empty"),n.type){case"rsa":return parseOneNum(e,t,r,n);case"ed25519":return parseOneNum(e,t,r,n);case"dsa":case"ecdsa":return"asn1"===r?parseDSAasn1(e,t,r,n):"dsa"===n.type?parseDSA(e,t,r,n):parseECDSA(e,t,r,n);default:throw new InvalidAlgorithmError(t)}}catch(i){if(i instanceof InvalidAlgorithmError)throw i;throw new SignatureParseError(t,r,i)}},Signature.isSignature=function(e,t){return utils.isCompatible(e,Signature,t)},Signature.prototype._sshpkApiVersion=[2,1],Signature._oldVersionDetect=function(e){return assert.func(e.toBuffer),e.hasOwnProperty("hashAlgorithm")?[2,0]:[1,0]};