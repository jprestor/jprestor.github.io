var test=require("tape"),SafeBuffer=require("./").Buffer;test("new SafeBuffer(value) works just like Buffer",function(e){e.deepEqual(new SafeBuffer("hey"),new Buffer("hey")),e.deepEqual(new SafeBuffer("hey","utf8"),new Buffer("hey","utf8")),e.deepEqual(new SafeBuffer("686579","hex"),new Buffer("686579","hex")),e.deepEqual(new SafeBuffer([1,2,3]),new Buffer([1,2,3])),e.deepEqual(new SafeBuffer(new Uint8Array([1,2,3])),new Buffer(new Uint8Array([1,2,3]))),e.equal(typeof SafeBuffer.isBuffer,"function"),e.equal(SafeBuffer.isBuffer(new SafeBuffer("hey")),!0),e.equal(Buffer.isBuffer(new SafeBuffer("hey")),!0),e.notOk(SafeBuffer.isBuffer({})),e.end()}),test("SafeBuffer.from(value) converts to a Buffer",function(e){e.deepEqual(SafeBuffer.from("hey"),new Buffer("hey")),e.deepEqual(SafeBuffer.from("hey","utf8"),new Buffer("hey","utf8")),e.deepEqual(SafeBuffer.from("686579","hex"),new Buffer("686579","hex")),e.deepEqual(SafeBuffer.from([1,2,3]),new Buffer([1,2,3])),e.deepEqual(SafeBuffer.from(new Uint8Array([1,2,3])),new Buffer(new Uint8Array([1,2,3]))),e.end()}),test("SafeBuffer.alloc(number) returns zeroed-out memory",function(e){for(var t=0;10>t;t++){var r=new Buffer(1e3);r.fill(0),e.deepEqual(SafeBuffer.alloc(1e3),r);var n=new Buffer(1e6);n.fill(0),e.deepEqual(SafeBuffer.alloc(1e6),n)}e.end()}),test("SafeBuffer.allocUnsafe(number)",function(e){var t=SafeBuffer.allocUnsafe(100);e.equal(t.length,100),e.equal(SafeBuffer.isBuffer(t),!0),e.equal(Buffer.isBuffer(t),!0),e.end()}),test("SafeBuffer.from() throws with number types",function(e){e.plan(5),e["throws"](function(){SafeBuffer.from(0)}),e["throws"](function(){SafeBuffer.from(-1)}),e["throws"](function(){SafeBuffer.from(NaN)}),e["throws"](function(){SafeBuffer.from(1/0)}),e["throws"](function(){SafeBuffer.from(99)})}),test("SafeBuffer.allocUnsafe() throws with non-number types",function(e){e.plan(4),e["throws"](function(){SafeBuffer.allocUnsafe("hey")}),e["throws"](function(){SafeBuffer.allocUnsafe("hey","utf8")}),e["throws"](function(){SafeBuffer.allocUnsafe([1,2,3])}),e["throws"](function(){SafeBuffer.allocUnsafe({})})}),test("SafeBuffer.alloc() throws with non-number types",function(e){e.plan(4),e["throws"](function(){SafeBuffer.alloc("hey")}),e["throws"](function(){SafeBuffer.alloc("hey","utf8")}),e["throws"](function(){SafeBuffer.alloc([1,2,3])}),e["throws"](function(){SafeBuffer.alloc({})})});