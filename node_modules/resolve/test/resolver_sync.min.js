var path=require("path"),test=require("tape"),resolve=require("../");test("foo",function(e){var t=path.join(__dirname,"resolver");e.equal(resolve.sync("./foo",{basedir:t}),path.join(t,"foo.js")),e.equal(resolve.sync("./foo.js",{basedir:t}),path.join(t,"foo.js")),e["throws"](function(){resolve.sync("foo",{basedir:t})}),e.end()}),test("bar",function(e){var t=path.join(__dirname,"resolver");e.equal(resolve.sync("foo",{basedir:path.join(t,"bar")}),path.join(t,"bar/node_modules/foo/index.js")),e.end()}),test("baz",function(e){var t=path.join(__dirname,"resolver");e.equal(resolve.sync("./baz",{basedir:t}),path.join(t,"baz/quux.js")),e.end()}),test("biz",function(e){var t=path.join(__dirname,"resolver/biz/node_modules");e.equal(resolve.sync("./grux",{basedir:t}),path.join(t,"grux/index.js")),e.equal(resolve.sync("tiv",{basedir:path.join(t,"grux")}),path.join(t,"tiv/index.js")),e.equal(resolve.sync("grux",{basedir:path.join(t,"tiv")}),path.join(t,"grux/index.js")),e.end()}),test("normalize",function(e){var t=path.join(__dirname,"resolver/biz/node_modules/grux");e.equal(resolve.sync("../grux",{basedir:t}),path.join(t,"index.js")),e.end()}),test("cup",function(e){var t=path.join(__dirname,"resolver");e.equal(resolve.sync("./cup",{basedir:t,extensions:[".js",".coffee"]}),path.join(t,"cup.coffee")),e.equal(resolve.sync("./cup.coffee",{basedir:t}),path.join(t,"cup.coffee")),e["throws"](function(){resolve.sync("./cup",{basedir:t,extensions:[".js"]})}),e.end()}),test("mug",function(e){var t=path.join(__dirname,"resolver");e.equal(resolve.sync("./mug",{basedir:t}),path.join(t,"mug.js")),e.equal(resolve.sync("./mug",{basedir:t,extensions:[".coffee",".js"]}),path.join(t,"mug.coffee")),e.equal(resolve.sync("./mug",{basedir:t,extensions:[".js",".coffee"]}),path.join(t,"mug.js")),e.end()}),test("other path",function(e){var t=path.join(__dirname,"resolver"),r=path.join(t,"bar"),n=path.join(t,"other_path");e.equal(resolve.sync("root",{basedir:r,paths:[n]}),path.join(t,"other_path/root.js")),e.equal(resolve.sync("lib/other-lib",{basedir:r,paths:[n]}),path.join(t,"other_path/lib/other-lib.js")),e["throws"](function(){resolve.sync("root",{basedir:r})}),e["throws"](function(){resolve.sync("zzz",{basedir:r,paths:[n]})}),e.end()}),test("incorrect main",function(e){var t=path.join(__dirname,"resolver"),r=path.join(t,"incorrect_main");e.equal(resolve.sync("./incorrect_main",{basedir:t}),path.join(r,"index.js")),e.end()}),test("#25: node modules with the same name as node stdlib modules",function(e){var t=path.join(__dirname,"resolver/punycode");e.equal(resolve.sync("punycode",{basedir:t}),path.join(t,"node_modules/punycode/index.js")),e.end()});var stubStatSync=function(e){var t=require("fs"),r=t.statSync;try{return t.statSync=function(){throw new EvalError("Unknown Error")},e()}finally{t.statSync=r}};test("#79 - re-throw non ENOENT errors from stat",function(e){var t=path.join(__dirname,"resolver");stubStatSync(function(){e["throws"](function(){resolve.sync("foo",{basedir:t})},/Unknown Error/)}),e.end()}),test('#52 - incorrectly resolves module-paths like "./someFolder/" when there is a file of the same name',function(e){var t=path.join(__dirname,"resolver");e.equal(resolve.sync("./foo",{basedir:path.join(t,"same_names")}),path.join(t,"same_names/foo.js")),e.equal(resolve.sync("./foo/",{basedir:path.join(t,"same_names")}),path.join(t,"same_names/foo/index.js")),e.end()}),test("sync: #121 - treating an existing file as a dir when no basedir",function(e){var t=path.basename(__filename);e.test("sanity check",function(e){e.equal(resolve.sync("./"+t),__filename,"sanity check"),e.end()}),e.test("with a fake directory",function(e){function r(){return resolve.sync("./"+t+"/blah")}e["throws"](r,"throws an error");try{r()}catch(n){e.equal(n.code,"MODULE_NOT_FOUND","error code matches require.resolve"),e.equal(n.message,"Cannot find module './"+t+"/blah' from '"+__dirname+"'","can not find nonexistent module")}e.end()}),e.end()}),test("sync dot main",function(e){var t=new Date;e.equal(resolve.sync("./resolver/dot_main"),path.join(__dirname,"resolver/dot_main/index.js")),e.ok(new Date-t<50,"resolve.sync timedout"),e.end()}),test("sync dot slash main",function(e){var t=new Date;e.equal(resolve.sync("./resolver/dot_slash_main"),path.join(__dirname,"resolver/dot_slash_main/index.js")),e.ok(new Date-t<50,"resolve.sync timedout"),e.end()});