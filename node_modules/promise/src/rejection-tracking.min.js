"use strict";function disable(){enabled=!1,Promise._onHandle=null,Promise._onReject=null}function enable(e){function i(t){(e.allRejections||matchWhitelist(n[t].error,e.whitelist||DEFAULT_WHITELIST))&&(n[t].displayId=r++,e.onUnhandled?(n[t].logged=!0,e.onUnhandled(n[t].displayId,n[t].error)):(n[t].logged=!0,logError(n[t].displayId,n[t].error)))}function a(t){n[t].logged&&(e.onHandled?e.onHandled(n[t].displayId,n[t].error):n[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+n[t].displayId+"):"),console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id '+n[t].displayId+".")))}e=e||{},enabled&&disable(),enabled=!0;var t=0,r=0,n={};Promise._onHandle=function(e){2===e._state&&n[e._rejectionId]&&(n[e._rejectionId].logged?a(e._rejectionId):clearTimeout(n[e._rejectionId].timeout),delete n[e._rejectionId])},Promise._onReject=function(e,r){0===e._deferredState&&(e._rejectionId=t++,n[e._rejectionId]={displayId:null,error:r,timeout:setTimeout(i.bind(null,e._rejectionId),matchWhitelist(r,DEFAULT_WHITELIST)?100:2e3),logged:!1})}}function logError(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):");var r=(t&&(t.stack||t))+"";r.split("\n").forEach(function(e){console.warn("  "+e)})}function matchWhitelist(e,t){return t.some(function(t){return e instanceof t})}var Promise=require("./core"),DEFAULT_WHITELIST=[ReferenceError,TypeError,RangeError],enabled=!1;exports.disable=disable,exports.enable=enable;